package tools
import (
	// "fmt"
	// "errors"
	// "encoding/json"
	// "github.com/google/uuid"
	userlib "github.com/cs161-staff/project2-userlib"
)

/*
	User Key Mangement

	Core Key:
		Generated by PBKDF
		produce a generator key used to generate all other keys
	
	Other Keys:
		Generated by HashKDF seeded by a generator
		input:
			$CORE_KEY
			purpose string
		Example:
			To generate AES-CTR key for file encryption
			HashKDF(
				sourceKey: $CORE_KEY,
				purpose: 'ENC-$FILENAME'
			)
	
	To keep everything organized we using the following purpose string naming convention

	seperater: '-'

	I.  For file encryption:
	    <FUNCTION_NAME> - <FILENAME> - <BLOCK_NUM>
		Example:
				HMAC-a.txt-0
				ENC-a.txt-0
	
	II. Private Key encryption:
	    ENC-SK
	
	...
*/

func (userdataptr *User) GetKey(purpose string) ([]byte, error){
	ptr := userdataptr
	core_key := userlib.Argon2Key(
		[]byte(ptr.Password),
		ptr.Salt,
		16,
	)
	key, err := userlib.HashKDF(core_key, []byte(purpose))
	return key[:16], err
}

func (fileptr *File) GetKey(purpose string)([]byte, error){
	ptr := fileptr
	GKey := ptr.GKey
	key, err := userlib.HashKDF(GKey, []byte(purpose))
	return key[:16], err
}

